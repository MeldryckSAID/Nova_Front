"use client"

import { useEffect, useCallback } from "react"

interface SyncData {
  id: string
  type: string
  data: any
  timestamp: number
}

export function useBackgroundSync() {
  // Ajouter des donn√©es √† synchroniser
  const addToSyncQueue = useCallback(async (type: string, data: any) => {
    const syncItem: SyncData = {
      id: `sync-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      data,
      timestamp: Date.now(),
    }

    try {
      // Stocker en localStorage (en attendant IndexedDB)
      const existingQueue = JSON.parse(localStorage.getItem("syncQueue") || "[]")
      existingQueue.push(syncItem)
      localStorage.setItem("syncQueue", JSON.stringify(existingQueue))

      // D√©clencher la synchronisation si en ligne
      if (navigator.onLine && "serviceWorker" in navigator) {
        const registration = await navigator.serviceWorker.ready
        if ("sync" in registration) {
          await registration.sync.register("background-sync")
          console.log("üîÑ Background sync enregistr√©")
        }
      }

      return syncItem.id
    } catch (error) {
      console.error("Erreur lors de l'ajout √† la queue de sync:", error)
      return null
    }
  }, [])

  // Traiter la queue de synchronisation
  const processSyncQueue = useCallback(async () => {
    try {
      const syncQueue: SyncData[] = JSON.parse(localStorage.getItem("syncQueue") || "[]")

      if (syncQueue.length === 0) return

      console.log("üì§ Traitement de la queue de sync:", syncQueue.length, "√©l√©ments")

      const processedIds: string[] = []

      for (const item of syncQueue) {
        try {
          // Simuler l'envoi au serveur
          await simulateServerSync(item)
          processedIds.push(item.id)
          console.log("‚úÖ Sync r√©ussie pour:", item.type, item.id)
        } catch (error) {
          console.error("‚ùå √âchec sync pour:", item.type, item.id, error)
          // Garder l'√©l√©ment dans la queue pour retry
        }
      }

      // Supprimer les √©l√©ments trait√©s avec succ√®s
      if (processedIds.length > 0) {
        const remainingQueue = syncQueue.filter((item) => !processedIds.includes(item.id))
        localStorage.setItem("syncQueue", JSON.stringify(remainingQueue))
        console.log("üóëÔ∏è Supprim√©", processedIds.length, "√©l√©ments de la queue")
      }
    } catch (error) {
      console.error("Erreur lors du traitement de la queue:", error)
    }
  }, [])

  // Simuler l'envoi au serveur (√† remplacer par de vrais appels API)
  const simulateServerSync = async (item: SyncData): Promise<void> => {
    // Simulation d'un d√©lai r√©seau
    await new Promise((resolve) => setTimeout(resolve, 1000))

    switch (item.type) {
      case "booking":
        console.log("üìÖ Sync booking:", item.data)
        break
      case "message":
        console.log("üí¨ Sync message:", item.data)
        break
      case "profile":
        console.log("üë§ Sync profile:", item.data)
        break
      default:
        console.log("üì¶ Sync data:", item.type, item.data)
    }
  }

  // Obtenir le statut de la queue
  const getSyncQueueStatus = useCallback(() => {
    const syncQueue: SyncData[] = JSON.parse(localStorage.getItem("syncQueue") || "[]")
    return {
      count: syncQueue.length,
      oldestItem: syncQueue.length > 0 ? syncQueue[0] : null,
      types: [...new Set(syncQueue.map((item) => item.type))],
    }
  }, [])

  // Vider la queue manuellement
  const clearSyncQueue = useCallback(() => {
    localStorage.setItem("syncQueue", "[]")
    console.log("üóëÔ∏è Queue de sync vid√©e manuellement")
  }, [])

  useEffect(() => {
    // Traiter la queue quand on revient en ligne
    const handleOnline = () => {
      console.log("üåê Connexion r√©tablie, traitement de la queue...")
      processSyncQueue()
    }

    window.addEventListener("online", handleOnline)

    // Traiter la queue au chargement si en ligne
    if (navigator.onLine) {
      processSyncQueue()
    }

    return () => {
      window.removeEventListener("online", handleOnline)
    }
  }, [processSyncQueue])

  return {
    addToSyncQueue,
    processSyncQueue,
    getSyncQueueStatus,
    clearSyncQueue,
  }
}
